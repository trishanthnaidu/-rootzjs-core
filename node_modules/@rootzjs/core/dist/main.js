"use strict";

Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.getContext = exports.getAllState = exports.setContext = exports.setHandler = exports.requestUpdate = exports.setHandlerVariable = exports.setImmutableObject = exports.ERROR = exports.consoleColorCode = exports.store = exports.scopeVariables = exports.componentStateHandler = exports.contextStore = void 0;
// https://github.com/rootzjs/core v1.1.0 Copyright 2019 Trishanth Naidu
let contextStore = {};
exports.contextStore = contextStore;
let componentStateHandler = {};
exports.componentStateHandler = componentStateHandler;
let scopeVariables = {
        leafs: {},
        nodes: {}
};
exports.scopeVariables = scopeVariables;
const store = {
        __timeStamp: 0
};
exports.store = store;
const commonStyles = "color: #fff; font-size:12px; margin-left: 7px; border-radius: 3px; padding: 2px 7px 2px 7px;";
const consoleColorCode = {
        common: {
                el: commonStyles + " background-color: #ff980094;",
                title: commonStyles + " background-color: #93ce09de;",
                context: commonStyles + " background-color: #55555597;"
        },
        error: {
                brand: "color: #fff; font-size:12px;  border-radius: 3px; padding: 2px 0 2px 7px; text-align: center; background-color: #e91e63a9;"
        },
        warning: {
                brand: "color: #fff; font-size:12px;  border-radius: 3px; padding: 2px 0 2px 7px; text-align: center; background-color: #ffc107;"
        }
};
exports.consoleColorCode = consoleColorCode;
const ERROR = {
        NODE_NAME_ALREADY_EXISTS: name => `%cRootzJs Error %c${name} %cDuplicate entry found, Node Name already exists`,
        LEAF_NAME_ALREADY_EXISTS: name => `%cRootzJs Error %c${name} %cDuplicate entry found, Leaf Name already exists`,
        ACTIONS_ARE_NOT_FUNCTION: name => `%cRootzJs Error %c${name} %cInvalid type Actions, Actions should be of type function`,
        INVALID_CONTRACT_TYPE: name => `%cRootzJs Error %c${name} %cInvalid Contract type, create a contract by 'Rootz.createContract' hook only`,
        STATE_OF_SWITCH_SHOULD_BE_BOOLEAN: name => `%cRootzJs Error %c${name} %cInvalid type intialState, initialState should be of type Boolean`,
        CONTRACTS_ARE_NOT_FUNCTION: name => `%cRootzJs Error %c${name} %cInvalid type Actions in Contract, Actions passed in Contract should be of type function`
};
exports.ERROR = ERROR;
console.log(`%cRootz JS %cvisit 'www.rootjz.org to get started' %cRootz Js is a modern State Management tool for React Applications`, consoleColorCode.error.brand, consoleColorCode.common.el, consoleColorCode.common.context);
/*
* Intrinsic Functions
*/

const setImmutableObject = (state, newState) => Object.assign({}, state, newState);

exports.setImmutableObject = setImmutableObject;

const setHandlerVariable = (id, stateHandlerVariable) => {
        exports.componentStateHandler = componentStateHandler = setImmutableObject(componentStateHandler, {
                [id]: stateHandlerVariable
        });
};

exports.setHandlerVariable = setHandlerVariable;

const requestUpdate = id => {
        const requestedBranch = componentStateHandler[id];
        const rootzStateHandlerVariable = requestedBranch.__rootzStateHandlerVariable + 1;
        requestedBranch.stateHandler({
                __rootzStateHandlerVariable: rootzStateHandlerVariable
        });
        componentStateHandler[id] = setImmutableObject(componentStateHandler[id], {
                __rootzStateHandlerVariable: rootzStateHandlerVariable
        });
};

exports.requestUpdate = requestUpdate;

const setHandler = function setHandler(storeID, handler) {
        componentStateHandler[storeID] = setImmutableObject(componentStateHandler[storeID], {
                stateHandler: handler.bind(this)
        });
};
/*
* Access Functions - Starts Here
*/


exports.setHandler = setHandler;

const setContext = state => {
        exports.contextStore = contextStore = setImmutableObject(contextStore, state);
};

exports.setContext = setContext;

const getAllState = () => store;

exports.getAllState = getAllState;

const getContext = () => contextStore;
/*
* Access Functions
*/


exports.getContext = getContext;