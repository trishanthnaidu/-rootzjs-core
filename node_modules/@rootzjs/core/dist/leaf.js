"use strict";

Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.createLeaf = exports.Leaf = void 0;

var _react = _interopRequireDefault(require("react"));

var _node = require("./node");

var _main = require("./main");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// check if the leafId already exists
const validateLeafId = (leafId, nodeId) => {
        if (_main.store.hasOwnProperty(nodeId) && _main.store[nodeId]["leafs"].hasOwnProperty(leafId)) {
                console.log(_main.ERROR.LEAF_NAME_ALREADY_EXISTS(leafId), consoleColorCode.error.brand, consoleColorCode.common.title, consoleColorCode.common.context);
                throw new Error();
        }
};

const setLeafState = (leafId, nodeId, state) => {
        if (!_main.store.hasOwnProperty(nodeId)) {
                (0, _node.setNodeState)(nodeId, {});
        }

        _main.store[nodeId]["leafs"][leafId] = (0, _main.setImmutableObject)(_main.store[nodeId]["leafs"][leafId], state);
};

const updateLeafState = (leafId, nodeId, state) => {
        setLeafState(leafId, nodeId, state);
        (0, _main.requestUpdate)(leafId);
};

const getLeafState = (leafId, nodeId) => {
        let emptyState = {};
        return (0, _main.setImmutableObject)(emptyState, _main.store[nodeId]["leafs"][leafId]);
}; // ceate Leaf


const createLeaf = ({
        id,
        nodeId,
        updateIf,
        Component,
        state = {},
        actions = [[], []]
}) => {
        var _temp;

        // check if the leafId already exists
        validateLeafId(id, nodeId); // create a state handler variable for refreshing the state

        const stateHandlerVariable = {
                __rootzStateHandlerVariable: 0
        }; // Store the initial State in the applicaton Store

        setLeafState(id, nodeId, state); // sets the handler variable in the Store

        (0, _main.setHandlerVariable)(id, stateHandlerVariable);
        return {
                [id]: class extends _react.default.PureComponent {
                        constructor(props) {
                                super(props);

                                _defineProperty(this, "shouldComponentUpdate", updateIf);

                                this.state = stateHandlerVariable;
                                this.derivedActions = {};
                                const selfActions = actions[0] || [];
                                const nodeActions = actions[1] || [];
                                selfActions.forEach(func => {
                                        (0, _node.validateActions)(func, id);

                                        this.derivedActions[func.name] = (...props) => {
                                                const derivedState = func(...props);
                                                updateLeafState(id, nodeId, derivedState);
                                        };
                                });
                                nodeActions.forEach(func => {
                                        (0, _node.validateActions)(func, id);

                                        this.derivedActions[func.name] = (...props) => {
                                                const derivedState = func(...props);
                                                (0, _node.updateNodeState)(nodeId, derivedState);
                                        };
                                }); // setting the handler

                                _main.setHandler.call(this, id, this.setState);
                        }

                        render() {
                                if (!_main.scopeVariables.leafs.hasOwnProperty(id)) {
                                        _main.scopeVariables.leafs[id] = {
                                                scope: {},
                                                actions: {}
                                        };
                                        _main.scopeVariables.leafs[id]["scope"] = (0, _main.setImmutableObject)(_main.scopeVariables.leafs[id]["scope"], this);
                                        _main.scopeVariables.leafs[id]["actions"] = (0, _main.setImmutableObject)(_main.scopeVariables.leafs[id]["actions"], {
                                                [id]: actions[0].map(x => x.name),
                                                [nodeId]: actions[1].map(x => x.name)
                                        });
                                } // fetches the latest state everytime the package is called


                                const state = getLeafState(id, nodeId);
                                const context = (0, _main.getContext)();
                                return /*#__PURE__*/_react.default.createElement(Component, {
                                        state: state,
                                        context: context,
                                        props: this.props,
                                        actions: this.derivedActions
                                });
                        }

                }
        }[id];
}; // update leaf attributes


exports.createLeaf = createLeaf;
const Leaf = {
        setState: (id, nodeId, state) => updateLeafState(id, nodeId, state),
        getState: (id, nodeId) => getLeafState(id, nodeId)
};
exports.Leaf = Leaf;